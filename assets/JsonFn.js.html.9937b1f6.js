import{_ as n,o as s,c as a,g as t}from"./app.7b383bae.js";const p={},e=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// \u5B9E\u73B0 JSON.stringify</span>
<span class="token comment">//   JSON.stringify([, replacer [, space]) \u65B9\u6CD5\u662F\u5C06\u4E00\u4E2A JavaScript \u503C(\u5BF9\u8C61\u6216\u8005\u6570\u7EC4)\u8F6C\u6362\u4E3A\u4E00\u4E2A JSON \u5B57\u7B26\u4E32\u3002</span>
<span class="token comment">//   \u6B64\u5904\u6A21\u62DF\u5B9E\u73B0\uFF0C\u4E0D\u8003\u8651\u53EF\u9009\u7684\u7B2C\u4E8C\u4E2A\u53C2\u6570 replacer \u548C\u7B2C\u4E09\u4E2A\u53C2\u6570 space\uFF0C\u5982\u679C\u5BF9\u8FD9\u4E24\u4E2A\u53C2\u6570\u7684\u4F5C\u7528\u8FD8\u4E0D\u4E86\u89E3\uFF0C\u5EFA\u8BAE\u9605\u8BFB MDN \u6587\u6863\u3002</span>
<span class="token comment">//   1. \u57FA\u672C\u6570\u636E\u7C7B\u578B\uFF1A</span>
<span class="token comment">//     undefined \u8F6C\u6362\u4E4B\u540E\u4ECD\u662F undefined(\u7C7B\u578B\u4E5F\u662F undefined)</span>
<span class="token comment">//     boolean \u503C\u8F6C\u6362\u4E4B\u540E\u662F\u5B57\u7B26\u4E32 &quot;false&quot;/&quot;true&quot;</span>
<span class="token comment">//     number \u7C7B\u578B(\u9664\u4E86 NaN \u548C Infinity)\u8F6C\u6362\u4E4B\u540E\u662F\u5B57\u7B26\u4E32\u7C7B\u578B\u7684\u6570\u503C</span>
<span class="token comment">//     symbol \u8F6C\u6362\u4E4B\u540E\u662F undefined</span>
<span class="token comment">//     null \u8F6C\u6362\u4E4B\u540E\u662F\u5B57\u7B26\u4E32 &quot;null&quot;</span>
<span class="token comment">//     string \u8F6C\u6362\u4E4B\u540E\u4ECD\u662Fstring</span>
<span class="token comment">//     NaN \u548C Infinity \u8F6C\u6362\u4E4B\u540E\u662F\u5B57\u7B26\u4E32 &quot;null&quot;</span>
<span class="token comment">//   2.\u51FD\u6570\u7C7B\u578B\uFF1A\u8F6C\u6362\u4E4B\u540E\u662F undefined</span>
<span class="token comment">//   3.\u5982\u679C\u662F\u5BF9\u8C61\u7C7B\u578B(\u975E\u51FD\u6570)</span>
<span class="token comment">//     \u5982\u679C\u662F\u4E00\u4E2A\u6570\u7EC4\uFF1A\u5982\u679C\u5C5E\u6027\u503C\u4E2D\u51FA\u73B0\u4E86 undefined\u3001\u4EFB\u610F\u7684\u51FD\u6570\u4EE5\u53CA symbol\uFF0C\u8F6C\u6362\u6210\u5B57\u7B26\u4E32 &quot;null&quot; \uFF1B</span>
<span class="token comment">//     \u5982\u679C\u662F RegExp \u5BF9\u8C61\uFF1A\u8FD4\u56DE {} (\u7C7B\u578B\u662F string)\uFF1B</span>
<span class="token comment">//     \u5982\u679C\u662F Date \u5BF9\u8C61\uFF0C\u8FD4\u56DE Date \u7684 toJSON \u5B57\u7B26\u4E32\u503C\uFF1B</span>
<span class="token comment">//     \u5982\u679C\u662F\u666E\u901A\u5BF9\u8C61\uFF1B</span>
<span class="token comment">//       \u5982\u679C\u6709 toJSON() \u65B9\u6CD5\uFF0C\u90A3\u4E48\u5E8F\u5217\u5316 toJSON() \u7684\u8FD4\u56DE\u503C\u3002</span>
<span class="token comment">//       \u5982\u679C\u5C5E\u6027\u503C\u4E2D\u51FA\u73B0\u4E86 undefined\u3001\u4EFB\u610F\u7684\u51FD\u6570\u4EE5\u53CA symbol \u503C\uFF0C\u5FFD\u7565\u3002</span>
<span class="token comment">//       \u6240\u6709\u4EE5 symbol \u4E3A\u5C5E\u6027\u952E\u7684\u5C5E\u6027\u90FD\u4F1A\u88AB\u5B8C\u5168\u5FFD\u7565\u6389\u3002</span>
<span class="token comment">//   4.\u5BF9\u5305\u542B\u5FAA\u73AF\u5F15\u7528\u7684\u5BF9\u8C61\uFF08\u5BF9\u8C61\u4E4B\u95F4\u76F8\u4E92\u5F15\u7528\uFF0C\u5F62\u6210\u65E0\u9650\u5FAA\u73AF\uFF09\u6267\u884C\u6B64\u65B9\u6CD5\uFF0C\u4F1A\u629B\u51FA\u9519\u8BEF\u3002</span>
<span class="token keyword">function</span> <span class="token function">jsonStringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> dataType <span class="token operator">=</span> <span class="token keyword">typeof</span> data<span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dataType <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> data<span class="token punctuation">;</span>
      <span class="token comment">//data \u53EF\u80FD\u662F string/number/null/undefined/boolean</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span> data <span class="token operator">===</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//NaN \u548C Infinity \u5E8F\u5217\u5316\u8FD4\u56DE &quot;null&quot;</span>
          result <span class="token operator">=</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dataType <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> dataType <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">||</span> dataType <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//function \u3001undefined \u3001symbol \u5E8F\u5217\u5316\u8FD4\u56DE undefined</span>
          <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dataType <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result <span class="token operator">=</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//boolean \u8FD4\u56DE String()</span>
      <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dataType <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">&quot;null&quot;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>toJSON <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> data<span class="token punctuation">.</span>toJSON <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">jsonStringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token comment">//\u5982\u679C\u662F\u6570\u7EC4</span>
          <span class="token comment">//toJSON \u65B9\u6CD5\u53EF\u4EE5\u5B58\u5728\u4E8E\u539F\u578B\u94FE\u4E2D</span>
          data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">jsonStringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          result <span class="token operator">=</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#39;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">//\u666E\u901A\u5BF9\u8C61</span>
          <span class="token doc-comment comment">/**
           * \u5FAA\u73AF\u5F15\u7528\u629B\u9519(\u6682\u672A\u68C0\u6D4B\uFF0C\u5FAA\u73AF\u5F15\u7528\u65F6\uFF0C\u5806\u6808\u6EA2\u51FA)
           * symbol key \u5FFD\u7565
           * undefined\u3001\u51FD\u6570\u3001symbol \u4E3A\u5C5E\u6027\u503C\uFF0C\u88AB\u5FFD\u7565
           */</span>
          <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">!==</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment">//key \u5982\u679C\u662Fsymbol\u5BF9\u8C61\uFF0C\u5FFD\u7565</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span>
                      <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> data<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      <span class="token comment">//\u952E\u503C\u5982\u679C\u662F undefined\u3001\u51FD\u6570\u3001symbol \u4E3A\u5C5E\u6027\u503C\uFF0C\u5FFD\u7565</span>
                      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token function">jsonStringify</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;{&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#39;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// \u5B9E\u73B0 JSON.parse</span>
<span class="token comment">//   \u4ECB\u7ECD 2 \u79CD\u65B9\u6CD5\u5B9E\u73B0\uFF1A</span>
<span class="token comment">//     eval \u5B9E\u73B0\uFF1B</span>
<span class="token comment">//     new Function \u5B9E\u73B0\uFF1B</span>

<span class="token comment">//   1. eval \u5B9E\u73B0</span>
<span class="token comment">//     \u7B2C\u4E00\u79CD\u65B9\u5F0F\u6700\u7B80\u5355\uFF0C\u4E5F\u6700\u76F4\u89C2\uFF0C\u5C31\u662F\u76F4\u63A5\u8C03\u7528 eval\uFF0C\u4EE3\u7801\u5982\u4E0B\uFF1A</span>
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">&#39;{&quot;a&quot;:&quot;1&quot;, &quot;b&quot;:2}&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> json <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// obj \u5C31\u662F json \u53CD\u5E8F\u5217\u5316\u4E4B\u540E\u5F97\u5230\u7684\u5BF9\u8C61</span>
  <span class="token comment">// \u4F46\u662F\u76F4\u63A5\u8C03\u7528 eval \u4F1A\u5B58\u5728\u5B89\u5168\u95EE\u9898\uFF0C\u5982\u679C\u6570\u636E\u4E2D\u53EF\u80FD\u4E0D\u662F json \u6570\u636E\uFF0C\u800C\u662F\u53EF\u6267\u884C\u7684 JavaScript \u4EE3\u7801\uFF0C\u90A3\u5F88\u53EF\u80FD\u4F1A\u9020\u6210 XSS \u653B\u51FB\u3002</span>
  <span class="token comment">// \u56E0\u6B64\uFF0C\u5728\u8C03\u7528 eval \u4E4B\u524D\uFF0C\u9700\u8981\u5BF9\u6570\u636E\u8FDB\u884C\u6821\u9A8C\u3002</span>
  <span class="token keyword">var</span> rx_one <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\],:{}\\s]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> rx_two <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\(?:[&quot;\\\\\\/bfnrt]|u[0-9a-fA-F]{4})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> rx_three <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&quot;[^&quot;\\\\\\n\\r]*&quot;|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> rx_four <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|:|,)(?:\\s*\\[)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    rx_one<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>
      json<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rx_two<span class="token punctuation">,</span> <span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rx_three<span class="token punctuation">,</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>rx_four<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span> <span class="token operator">+</span>json <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 2. ew Function \u5B9E\u73B0</span>
  <span class="token comment">//     Function \u4E0E eval \u6709\u76F8\u540C\u7684\u5B57\u7B26\u4E32\u53C2\u6570\u7279\u6027\u3002</span>
  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;\u5C0F\u59D0\u59D0&quot;, &quot;age&quot;:20}&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">(</span><span class="token string">&#39;return &#39;</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","JsonFn.js.html.vue"]]);export{r as default};
