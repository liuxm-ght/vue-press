import{_ as n,o as s,c as a,e as p}from"./app.6cfd3ac5.js";const t={},e=p(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * \u5F02\u6B65\u5B9E\u73B0
 *    \u53C2\u8003\u6587\u7AE0\uFF1Ahttps://juejin.cn/post/6844904147884441608#heading-0
 * \u5B8F\u89C2\u4EFB\u52A1
 *    script\u3001setTimeout\u3001setInterval\u3001I/O\u3001UI\u4EA4\u4E92\u4E8B\u4EF6\u3001postMessage\u3001MessageChannel\u3001setImmediate(Node.js \u73AF\u5883)\uFF1B
 * \u5FAE\u89C2\u4EFB\u52A1
 *    promise async await  
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">MicrotaskFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> _<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">MutationObserveFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// MutationObserver\u53EF\u4EE5\u7ED1\u5B9A\u67D0\u4E2A\u8282\u70B9\uFF0C\u5F53\u8282\u70B9\u6539\u53D8\u65F6\uFF0C\u56DE\u8C03\u51FD\u6570callback\u5C06\u653E\u5165\u5FAE\u4EFB\u52A1\u4E2D</span>
  <span class="token comment">// \u901A\u8FC7\u88C5\u9970\u8005\u6A21\u5F0F\uFF0C\u5C06\u56DE\u8C03\u51FD\u6570\u5305\u88C5\u4E00\u4E0B\uFF0C\u5C06\u6267\u884C\u4E4B\u540E\u7684\u8FD4\u56DE\u503C\u4FDD\u5B58\u8D77\u6765</span>
  <span class="token keyword">const</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u4E3A\u4E86\u8282\u7EA6\u5F00\u9500\uFF0C\u521B\u5EFA\u4E00\u4E2A\u6587\u672C\u6BD4\u521B\u5EFA\u4E00\u4E2Adom\u53EF\u5212\u7B97\u7684\u591A</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  observe<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5F53\u6587\u672C\u6539\u53D8\u65F6\u89E6\u53D1\u56DE\u8C03</span>
    characterData<span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6539\u53D8\u6587\u672C\uFF0C\u56DE\u8C03callback\u89E6\u53D1</span>
  textNode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  observe <span class="token operator">=</span> textNode <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
cid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//\u5904\u7406 then \u6210\u529F\u6216\u5931\u8D25\u51FD\u6570 \u8FD4\u56DE\u503C\u5F97\u7C7B\u578B\uFF0C\u6839\u636E\u7C7B\u578B\u5904\u7406\u5F53\u524Dthen_promise\u7684\u72B6\u6001</span>
<span class="token keyword">const</span> <span class="token function-variable function">resolvePromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5904\u7406x\u662F\u4E3A\u4E86\u5982\u679Cx\u662Fpromise\u9700\u8981\u7B49\u5F85\u5176\u5B8C\u6210\u540E\u518D\u7EE7\u7EEDpromise2\uFF0C\u5982\u679Cx\u4E0Epromise2\u4E00\u81F4\uFF0C\u5219\u81EA\u5DF1\u7B49\u5F85\u81EA\u5DF1\u662F\u9519\u8BEF\u7684</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">===</span> promise2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Chaining cycle detected for promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> called<span class="token punctuation">;</span>
  <span class="token comment">// \u5982\u679C\u662Fpromise\u5B9E\u4F8B\uFF0C\u90A3\u4E48\u6267\u884C\u5B83\u7684then\u51FD\u6570\uFF0C\u5728\u6210\u529F\u56DE\u8C03\u91CC\u6539\u53D8\u8FD4\u56DE\u8FD9promise\u5B9E\u4F8B\u7684then_promise\u7684\u72B6\u6001\uFF0C\u6210\u529F\u56DE\u8C03\u5904\u7406\u5B8C\u540E\u7EE7\u7EED\u5904\u7406\u5F53\u524Dthen\u51FD\u6570\u7684\u72B6\u6001</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span> <span class="token comment">// x\u662Fthenable\u7C7B\u578B\u7684</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// then\u662F\u4E2A\u51FD\u6570</span>
        <span class="token comment">//\u6267\u884Cthen\u51FD\u6570\uFF0C\u7B49\u5F85\u5176\u6210\u529F\u6216\u5931\u8D25\uFF0C</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> 
          <span class="token comment">//\u5982\u679C\u6210\u529F\uFF0C\u5219\u83B7\u53D6\u6210\u529F\u7684\u7ED3\u679Cy\uFF0C\u7EE7\u7EED\u5904\u7406y\uFF0C\u5982\u679Cy\u662Fpromise\u540C\u6837\u8DDFx\u7684\u5904\u7406\u4E00\u6837\uFF0C\u5176\u4ED6\u60C5\u51B5\u662F\u76F4\u63A5\u6267\u884C\u4E4B\u524Dpromise2\u7684\u6210\u529F\u56DE\u8C03resolve(y)</span>
          y <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5148\u6539\u53D8retrun_promise\u5B9E\u4F8B\u7684 then_promise\u7684\u72B6\u6001\uFF1B\u5B8C\u4E86\u4E4B\u540E\u6267\u884Cretrun_promise\u5B9E\u4F8BresolvePromise\u521B\u9020\u7684then_promise\u7684\u72B6\u6001</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> 
          <span class="token comment">// \u5982\u679C\u5931\u8D25\uFF0C\u76F4\u63A5reject</span>
          err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u4E0D\u662F\u51FD\u6570\uFF0C\u76F4\u63A5\u5C06x\u8FD4\u56DE\u7ED9\u4E4B\u524Dpromise2\uFF0C\u5F53\u6210\u6210\u529F\u56DE\u8C03\u7684\u53C2\u6570</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// \u5176\u4ED6\u60C5\u51B5\uFF0C\u76F4\u63A5resolve\uFF0C\u8FD9\u91CC\u7684resolve\u3001reject\u90FD\u662F\u4E4B\u524Dpromise2\u7684</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">&#39;resolved&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span> <span class="token punctuation">(</span>executor<span class="token punctuation">,</span>pid_params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pid_params <span class="token operator">=</span> pid_params
    <span class="token keyword">this</span><span class="token punctuation">[</span>pid_params<span class="token punctuation">]</span> <span class="token operator">=</span> pid_params <span class="token operator">===</span> <span class="token string">&#39;pid&#39;</span> <span class="token operator">?</span> pid<span class="token operator">++</span> <span class="token operator">:</span> cid<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedQueues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> executor <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Promise resolver undefined is not a function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> value <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&#39;---this.resolvedQueues---&#39;, this.resolvedQueues,value);</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token constant">RESOLVED</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedQueues<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> reason <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueues<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span> <span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(onFulfilled(),&#39;onFulfilled&#39;);</span>
    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> value <span class="token operator">=&gt;</span> value<span class="token punctuation">;</span>
    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> reason <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> reason<span class="token punctuation">}</span>
    <span class="token comment">// \u7B2C\u4E8C\u6B65 \u52A0\u4E0A return this</span>
    <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// MicrotaskFun();</span>
        <span class="token comment">// MutationObserveFun()</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// console.log(&#39;setimet resolve&#39;);</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u5904\u7406x\uFF0Cx\u53EF\u80FD\u662F\u4E2Apromise</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5904\u7406then_promise\u7684\u72B6\u6001</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> MyPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&#39;---this.resolvedQueues---push&#39;, this);</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedQueues<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueues<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>pid_params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span>pid_params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//\u5982\u679C\u4F20\u5165\u662Fpromise\u5219\u8FD4\u56DE\u8FD9\u4E2Apromise\uFF0C\u5426\u5219\u8FD4\u56DE\u4E00\u4E2A\u6210\u529F\u72B6\u6001\u7684promise</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> pid_params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token punctuation">,</span>pid_params<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//\u5982\u679C\u4F20\u5165\u662Fpromise\u5219\u8FD4\u56DE\u8FD9\u4E2Apromise\uFF0C\u5426\u5219\u8FD4\u56DE\u4E00\u4E2A\u5931\u8D25\u72B6\u6001\u7684promise</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reason <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">,</span> pid_params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token punctuation">(</span>promiseAll<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// \u53EA\u6709\u6240\u6709promise\u90FD\u6210\u529F\u4E86\uFF0C\u624D\u8FD4\u56DE\u6700\u540E\u7684result\u96C6\u5408 ; \u53EA\u8981\u6709\u4E00\u4E2A\u9519\u8BEF\uFF0C\u5C31\u8FD4\u56DE\u9519\u8BEF</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      promiseAll<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          index<span class="token operator">++</span>
          result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value
          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u53EA\u8981\u6240\u6709promise\u90FD\u6210\u529F\u4E86\uFF0C\u624D\u8FD4\u56DE\u6700\u540E\u7684result\u96C6\u5408</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">// \u53EA\u8981\u6709\u4E00\u4E2A\u9519\u8BEF\uFF0C\u5C31\u8FD4\u56DE\u9519\u8BEF</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function-variable function">race</span> <span class="token operator">=</span> <span class="token punctuation">(</span>promiseAll<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// \u65E0\u8BBA\u6210\u529F\u5931\u8D25\uFF0C\u90FD\u8FD4\u56DE\u7B2C\u4E00\u4E2A\u6267\u884C\u5B8C\u6210\u7684</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      promiseAll<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// \u53EA\u8981\u6709\u4E00\u4E2A\u6210\u529F\u4E86\uFF0C\u5C31\u8FD4\u56DE\u7ED3\u679C</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// \u53EA\u8981\u6709\u4E00\u4E2A\u9519\u8BEF\uFF0C\u5C31\u8FD4\u56DE\u9519\u8BEF</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function-variable function">any</span> <span class="token operator">=</span> <span class="token punctuation">(</span>promiseAll<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// \u53EA\u8981\u6709\u4E00\u4E2A\u6210\u529F\u4E86\uFF0C\u5C31\u8FD4\u56DE\u7ED3\u679C;\u53EA\u6709\u6240\u6709\u90FD\u662F\u9519\u8BEF\uFF0C\u624D\u629B\u51FA\u9519\u8BEF</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      promiseAll<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// \u53EA\u8981\u6709\u4E00\u4E2A\u6210\u529F\u4E86\uFF0C\u5C31\u8FD4\u56DE\u7ED3\u679C</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// \u53EA\u6709\u6240\u6709\u90FD\u662F\u9519\u8BEF\uFF0C\u624D\u629B\u51FA\u9519\u8BEF</span>
          index<span class="token operator">++</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> promiseAll<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AggregateError</span><span class="token punctuation">(</span><span class="token string">&#39;All promises were rejected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function-variable function">allsettled</span> <span class="token operator">=</span> <span class="token punctuation">(</span>promiseAll<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// \u8FD4\u56DE\u6240\u6709promise\u7684\u72B6\u6001\u53CA\u7ED3\u679C\uFF0C\u4E0D\u7BA1\u662F\u6210\u529F\u5931\u8D25\uFF0C\u53EA\u6709\u6240\u6709promise\u90FD\u6539\u53D8\u72B6\u6001\u624D\u8FD4\u56DEresult\u6570\u7EC4\uFF0C\u5426\u5219\u8FD4\u56DEpending\u7684\u72B6\u6001</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      promiseAll<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            status<span class="token operator">:</span><span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">,</span>
            value<span class="token operator">:</span>val
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>promiseAll<span class="token punctuation">.</span>length <span class="token operator">===</span> result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            status<span class="token operator">:</span><span class="token string">&#39;rejected&#39;</span><span class="token punctuation">,</span>
            reason<span class="token operator">:</span>err
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>promiseAll<span class="token punctuation">.</span>length <span class="token operator">===</span> result<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//Promise \u5199\u5B8C\u4E4B\u540E\u53EF\u4EE5\u901A\u8FC7 promises-aplus-tests \u8FD9\u4E2A\u5305\u5BF9\u6211\u4EEC\u5199\u7684\u4EE3\u7801\u8FDB\u884C\u6D4B\u8BD5\uFF0C\u770B\u662F\u5426\u7B26\u5408 A+ \u89C4\u8303\u3002\u4E0D\u8FC7\u6D4B\u8BD5\u524D\u8FD8\u5F97\u52A0\u4E00\u6BB5\u4EE3\u7801\uFF1A</span>
<span class="token comment">//npm i promises-aplus-tests -g</span>
<span class="token comment">// \u6267\u884C\u6D4B\u8BD5\u7528\u4F8B\u9700\u8981\u7528\u5230\u7684\u4EE3\u7801</span>
MyPromise<span class="token punctuation">.</span>defer <span class="token operator">=</span> MyPromise<span class="token punctuation">.</span><span class="token function-variable function">deferred</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> defer <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  defer<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    defer<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
    defer<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> defer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// let p1 = MyPromise.resolve().then(v=&gt;console.log(1)).then(v=&gt;console.log(2)).then(v=&gt;console.log(3))</span>
<span class="token comment">// p1.then(v=&gt;console.log(4))</span>
<span class="token comment">// p1.then(v=&gt;console.log(5))</span>
<span class="token comment">// console.log(6666);</span>
<span class="token comment">// let p2 = MyPromise.resolve().then(v=&gt;console.log(11)).then(v=&gt;console.log(22)).then(v=&gt;console.log(33))</span>
<span class="token comment">// p2.then(v=&gt;console.log(44))</span>
<span class="token comment">// p2.then(v=&gt;console.log(55))</span>
<span class="token comment">// module.exports = MyPromise;</span>
<span class="token comment">// export default MyPromise;</span>


MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;first&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;pid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cid&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// pid0 - pid0_resolved - resolvedQueues_pid0.forEach [] - pid0.then - pid1 - pid0_resolved - \u628Ast1_pid1\u585E\u961F\u5217</span>
<span class="token comment">// - pid1.then - pid2 - pid1_pending - resolvedQueues_pid1.push(cb_clg4)</span>

<span class="token comment">// cid0 - cid0_resolved - resolvedQueues_cid0.forEach [] - cid0.then - cid1 - cid0_resolved - \u628Ast1_cid1\u585E\u961F\u5217</span>
<span class="token comment">// - cid1.then - cid2 - cid1_pending - resolvedQueues_cid1.push(cb_clg2)</span>

<span class="token comment">// \u961F\u5217\u6267\u884Cst1_pid1 - console.log(0) - st1_pid1\u8FD4\u56DEpid3\u4E14\u72B6\u6001resolved - resolvePromise_pid1 </span>
<span class="token comment">// - pid3.then - pid4 - pid3_resolved - \u628Ast4_pid4\u585E\u961F\u5217(onFulfilled \u4E3A\u521B\u5EFA\u7684 y=&gt;{resolvePromise_pid1(promise2, y, resolve_pid1, reject);})</span>

<span class="token comment">// \u961F\u5217\u6267\u884Cst1_cid1 - console.log(1) - resolvePromise_cid1 - cid1_resolved - resolvedQueues_pid1.forEach [cb_clg2] - \u628Ast2_cid2\u585E\u961F\u5217</span>

<span class="token comment">// \u961F\u5217\u6267\u884Cst4_pid4 - resolvePromise_pid1 - resolve_pid1(y) - pid1_resolved - resolvedQueues_pid1.forEach [cb_clg4] - \u628Ast2_pid2\u585E\u961F\u5217</span>

<span class="token comment">// \u961F\u5217\u6267\u884Cst2_cid2 - console.log(2) - resolvePromise_cid2 - cid2_resolved - resolvedQueues_pid2.forEach [cb_clg3] - \u628Ast3_cid3\u585E\u961F\u5217</span>

<span class="token comment">// \u961F\u5217\u6267\u884Cst2_pid2 - console.log(4) - resolvePromise_pid2 - pid2_resolved - resolvedQueues_pid2.forEach [] </span>

<span class="token comment">// \u961F\u5217\u6267\u884Cst3_cid3 - console.log(3) - resolvePromise_cid3 - cid3_resolved - resolvedQueues_pid3.forEach [cb_clg5] - \u628Ast5_cid5\u585E\u961F\u5217</span>
<span class="token comment">// \u961F\u5217\u6267\u884Cst5_cid5 - console.log(5) - resolvePromise_cid5 - cid5_resolved - resolvedQueues_pid5.forEach [cb_clg6] - \u628Ast6_cid6\u585E\u961F\u5217</span>
<span class="token comment">// \u961F\u5217\u6267\u884Cst6_cid6 - console.log(6) - resolvePromise_cid6 - cid6_resolved - resolvedQueues_pid3.forEach [] </span>






</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[e];function c(l,i){return s(),a("div",null,o)}var k=n(t,[["render",c],["__file","promise.js.html.vue"]]);export{k as default};
